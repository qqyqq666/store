<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--namespace属性:用于指定当前的映射文件和哪个接口进行映射，需要指定接口的文件路径，需要标注包的完整路径接口-->

<mapper namespace="com.example.store.mapper.UserMapper">
    <!--
       select:表示查询操作。
       id: 你要执行的sql语法的唯一标识， mybatis会使用这个id的值来找到要执行的sql语句
           可以自定义，但是要求你使用接口中的方法名称。

       resultType:表示结果类型的， 是sql语句执行后得到ResultSet,遍历这个ResultSet得到java对象的类型。
          值写的类型的全限定名称
    -->
    <!--id属性:表示映射的接口中方法的名称，直接在标签的内容部来编写SQL语句-->
    <!--
        useGeneratedKeys属性:表示开启某个字段的值递增（主键设置为递增>
        keyProperty属性:标签将表中的哪个字段作为主键进行递增
    -->


    <!--自定义映射规则:resultMap标签来完成映射规则的定义-->
   <!--
    id属性:标签给这个映射负责分配一个唯一的id值，对应的就是resuvltMap=""id属性的值""属性的取值
    type属性:取值是一个类，表示的是数据库中的查询结果与Java中哪个实体类进行结果集的映射
   -->
<resultMap id="UserEntityMap" type="com.example.store.entity.User">
    <!---将表的资源和类的属性不一致的字段进行匹配指定，名称一致的字段可以省略不写-->
    <!--
    配合完成名称不一致的映射:
    column属性:表示表中的资源名称
    property属性:表示类中的属性名‘
    -->
    <!--在定义映射规则时主键是不可以省略的-->
    <id column="uid" property="uid"/>

    <result column="is_delete" property="isDelete"/>
    <result column="created_user" property="createdUser"/>
    <result column="created_time" property="createdTime"/>
    <result column="modified_user" property="modifiedUser"/>
    <result column="modified_time" property="modifiedTime"/>

</resultMap>

    <insert id="insert" useGeneratedKeys="true" keyProperty="uid">
        insert into t_user
            (username, password, salt, phone, email, gender, avatar, is_delete,
                created_user, created_time, modified_user, modified_time)
        values
            (#{username}, #{password}, #{salt}, #{phone}, #{email}, #{gender}, #{avatar}, #{isDelete},
            #{createdUser}, #{createdTime}, #{modifiedUser}, #{modifiedTime})
<!--名字要和实体属性中的名字要一样-->
    </insert>
<!--
resvltType，表示查询的结果集类型，只需要指定对应映射类的类型，并且包含完整包接口;
resultTupe="com.example.store.entity).User" 这样写要求表中属性的名字要和类中属性的名字要一致
resultMap:标签当表的资源和类的对象属性的字段名称不一致时，来自定义查询结果集的映射规则

-->
    <select id="findByUsername" resultMap="UserEntityMap">
       select * from t_user where username = #{username}
    </select>
    <update id="updatePasswordByUid">
        update t_user set
            password = #{password},
            modified_user = #{modifiedUser},
            modified_time = #{modifiedTime}
        where uid = #{uid}
    </update>
    <!-- 根据用户id查询用户数据：User findByUid(Integer uid) -->
    <select id="findByUid" resultMap="UserEntityMap">
        select
            *
        from
            t_user
        where
            uid = #{uid}
    </select>

    <!-- 根据uid更新用户个人资料：Integer updateInfoByUid(User user) -->
    <update id="updateInfoByUid">
        UPDATE
        t_user
        SET
            <!---if表示条件判断标签，test接收的是一个返回值为boolean类的条件-->
        <if test="phone != null">phone = #{phone},</if><!--注意逗号的位置-->
        <if test="email != null">email = #{email},</if>
        <if test="gender != null">gender = #{gender},</if>
        modified_user = #{modifiedUser},
        modified_time = #{modifiedTime}
        WHERE
        uid = #{uid}
    </update>
    <update id="updateAvatarByUid">
        update t_user
        set
            avatar = #{avatar},
            modified_user = #{modifiedUser},
            modified_time = #{modifiedTime}   <!--无逗号-->
        WHERE
            uid = #{uid}
    </update>
</mapper>